{"remainingRequest":"/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/src/views/curso/Tema1.vue?vue&type=template&id=0e3b511d&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/src/views/curso/Tema1.vue","mtime":1742879185990},{"path":"/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Gerencia_Talento_Humano/U2_Gerencia_Talento_Humano/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gUHJvY2VzbyBhZHF1aXNpY2nDs24gZGUgdGFsZW50bzogcGVyZmlsZXMgZGUgY2FyZ28sIGNvbnRyYXRhY2nDs24gbGFib3JhbCciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5vdmVyZmxvdy1oaWRkZW4KCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy05CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWwgcHJvY2VzbyBkZSBhZHF1aXNpY2nDs24gZGUgdGFsZW50bywgZXNwZWPDrWZpY2FtZW50ZSBlbCByZWNsdXRhbWllbnRvIHkgbGEgc2VsZWNjacOzbiBkZSBwZXJzb25hbCwgZXMgdW5hIGFjdGl2aWRhZCBlc3RyYXTDqWdpY2EgcGFyYSBsYSBvcmdhbml6YWNpw7NuLiBTdSByZWxldmFuY2lhIHJhZGljYSBlbiBxdWUgdW5hIGNvbnRyYXRhY2nDs24gYWRlY3VhZGEgcHVlZGUgZ2VuZXJhciB1biBpbXBhY3RvIHBvc2l0aXZvIHNpZ25pZmljYXRpdm8sIG1pZW50cmFzIHF1ZSB1bmEgZGVjaXNpw7NuIGVycsOzbmVhIHB1ZWRlIHRyYWVyIGNvbnNlY3VlbmNpYXMgbmVnYXRpdmFzLgoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMb3MgcHJpbmNpcGFsZXMgb2JqZXRpdm9zIGRlIGVzdGUgcHJvY2VzbyBpbmNsdXllbjoKCiAgICAKICAgICAgLmNvbC1sZy0zLmQtbm9uZS5kLXNtLWJsb2NrCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xLnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmltYWdlLW91dC1iZy5tYi01CiAgICAgIC5weC00LnB4LW1kLTUKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzIuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogNTA1cHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIC5wdC00CiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNC5tdC1sZy01CiAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICB8ICNbc3Ryb25nIElkZW50aWZpY2FjacOzbiBkZSBuZWNlc2lkYWRlczpdIGluY29ycG9yYXIgdGFsZW50byBxdWUgY29udHJpYnV5YSBhbCBsb2dybyBkZSBsYXMgbWV0YXMgb3JnYW5pemFjaW9uYWxlcy4KICAgICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgIHwgI1tzdHJvbmcgRXZhbHVhY2nDs24gZGUgY2FuZGlkYXRvczpdIGNvbnNpZGVyYXIgaGFiaWxpZGFkZXMsIGNvbm9jaW1pZW50b3MsIGV4cGVyaWVuY2lhLCBtb3RpdmFjacOzbiB5IGFjdGl0dWQuCiAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICB8ICNbc3Ryb25nIEZvcnRhbGVjaW1pZW50byBkZSBsYSBtYXJjYSBlbXBsZWFkb3JhOl0gcmVzYWx0YXIgbG9zIGFzcGVjdG9zIHF1ZSBoYWNlbiBhdHJhY3RpdmEgYSBsYSBlbXByZXNhIHBhcmEgbG9zIHBvc3R1bGFudGVzLgogICAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgfCAjW3N0cm9uZyBDb211bmljYWNpw7NuIGRlIGxhIHByb3B1ZXN0YSBkZSB2YWxvciBhbCBlbXBsZWFkbzpdIGRlZmluaXIgbG9zIGJlbmVmaWNpb3MgcXVlIGxhIGVtcHJlc2Egb2ZyZWNlIGEgcXVpZW5lcyBmb3JtYW4gcGFydGUgZGUgZWxsYS4KCgogICAgI3RfMV8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuMV0gSW1wYWN0byBkZWwgcHJvY2VzbyBkZSBzZWxlY2Npw7NuCiAgICAKICAgIHAgVW4gcHJvY2VzbyBkZSBzZWxlY2Npw7NuIGJpZW4gZWplY3V0YWRvIHRyYWUgYmVuZWZpY2lvcyBjbGF2ZToKCiAgICAuYmctZnVsbC13aWR0aC0yLmJnLWZvbmRvLTEKICAgICAgLnB4LTQucHgtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFyamV0YS0xLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgUsOhcGlkYSBhZGFwdGFjacOzbgogICAgICAgICAgICAgICAgcC5tYi0wIEZhY2lsaXRhIGxhIGludGVncmFjacOzbiBkZWwgbnVldm8gZW1wbGVhZG8geSBzdSBjdXJ2YSBkZSBhcHJlbmRpemFqZS4KICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS90YXJqZXRhLTIucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBWYWxvciBhZ3JlZ2FkbwogICAgICAgICAgICAgICAgcC5tYi0wIExvcyBjb2xhYm9yYWRvcmVzIHNlbGVjY2lvbmFkb3MgYWRlY3VhZGFtZW50ZSBjb250cmlidXllbiBzaWduaWZpY2F0aXZhbWVudGUgYSBsb3MgcHJvY2Vzb3MgeSBvYmpldGl2b3MuCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFyamV0YS0zLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgT3B0aW1pemFjacOzbiBkZSByZWN1cnNvcwogICAgICAgICAgICAgICAgcC5tYi0wIFNlIGV2aXRhIGxhIHJlcGV0aWNpw7NuIGRlIHByb2Nlc29zIGRlIGNvbnRyYXRhY2nDs24geSBsb3MgY29zdG9zIGFzb2NpYWRvcy4KICAgIAogICAgcCBTaW4gZW1iYXJnbywgdW4gcHJvY2VzbyBpbmVmaWNheiBwdWVkZSBnZW5lcmFyIGltcGFjdG9zIG5lZ2F0aXZvcywgY29tbzoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi00CiAgICAgIC5jb2wtbGctNAogICAgICAgIC5iZy1jb2xvci10MS0yLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAubWItNAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbm8tMS5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgaDUubWItMiBBbHRvcyBjb3N0b3MgcG9yIHJvdGFjacOzbgogICAgICAgICAgICAgIHAubWItMCBQw6lyZGlkYSBkZSBpbnZlcnNpw7NuIGVuIGNhcGFjaXRhY2nDs24geSByZWNsdXRhbWllbnRvLgogICAgCiAgICAgIC5jb2wtbGctNAogICAgICAgIC5iZy1jb2xvci10MS0yLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAubWItNAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbm8tMi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgaDUubWItMiBGdWdhIGRlIGluZm9ybWFjacOzbiB5IHJldHJhc29zCiAgICAgICAgICAgICAgcC5tYi0wIEludGVycnVwY2nDs24gZGUgcHJveWVjdG9zIHkgc29icmVjYXJnYSBsYWJvcmFsIHBhcmEgZWwgZXF1aXBvLgogICAgCiAgICAgIC5jb2wtbGctNAogICAgICAgIC5iZy1jb2xvci10MS0yLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAubWItNAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXJzCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL2ljb25vLTIuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIGg1Lm1iLTIgUMOpcmRpZGEgZGUgdGllbXBvCiAgICAgICAgICAgICAgcC5tYi0wIFNlbGVjY2nDs24gaW5hZGVjdWFkYSBxdWUgb2JsaWdhIGEgcmVwZXRpciBlbCBwcm9jZXNvLCBhZmVjdGFuZG8gbGEgcHJvZHVjdGl2aWRhZC4KCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItdDEtMy5weC00LnB4LW1kLTUucHktNC5tYi01CiAgICAgIHAubWItMCBEYWRvIGxvIGFudGVyaW9yLCBlcyBlc2VuY2lhbCBxdWUgY2FkYSBldGFwYSBkZWwgcHJvY2VzbyBzZSByZWFsaWNlIGNvbiBkZXRhbGxlLCBldml0YW5kbyBjb250cmF0YWNpb25lcyBhcHJlc3VyYWRhcyBzb2xvIHBhcmEgY3VtcGxpciBpbmRpY2Fkb3JlcyBvIGNlcnJhciB2YWNhbnRlcy4KCgogICAgI3RfMV8yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuMl0gUGVyZmlsZXMgZGUgY2FyZ28KICAgIAoKICAgIHAgQW50ZXMgZGUgcHJvZnVuZGl6YXIgZW4gbGFzIGZhc2VzIGRlIHNlbGVjY2nDs24sIGVzIGZ1bmRhbWVudGFsIGRlZmluaXIgZWwgcGVyZmlsIGRlIGNhcmdvLiBFc3RlIGRvY3VtZW50byBzaXJ2ZSBjb21vIHVuYSBndcOtYSBwYXJhIGVsZWdpciBhIGxvcyBjYW5kaWRhdG9zIG3DoXMgYWRlY3VhZG9zLgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby1zbGlkZXIubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIFNseWRlckEodGlwbz0iYiIpLmJnLXdoaXRlCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGUtMS5wbmciLCBhbHQ9IkltYWdlbiBxdWUgcmVwcmVzZW50YSBsYSBtaXNpw7NuIGRlbCBwdWVzdG8gY29uIHVuIGVsZW1lbnRvIGdyw6FmaWNvIGRlIGVuZ3JhbmFqZSByb2pvIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDQgTWlzacOzbiBkZWwgcHVlc3RvCiAgICAgICAgICAgICAgcCBFc3RhYmxlY2UgbGEgcmF6w7NuIGRlIHNlciBkZWwgY2FyZ28gZGVudHJvIGRlIGxhIG9yZ2FuaXphY2nDs24sIGRldGFsbGFuZG8gc3UgaW1wYWN0byBlbiBlbCBjdW1wbGltaWVudG8gZGUgbG9zIG9iamV0aXZvcyBlc3RyYXTDqWdpY29zLCBzdSBhbGluZWFjacOzbiBjb24gbGEgdmlzacOzbiB5IG1pc2nDs24gaW5zdGl0dWNpb25hbCwgeSBzdSByZWxldmFuY2lhIGRlbnRybyBkZSBsYSBlc3RydWN0dXJhIG9yZ2FuaXphdGl2YS4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS9zbGlkZS0yLnBuZyIsIGFsdD0iSW1hZ2VuIHF1ZSBtdWVzdHJhIGVuZ3JhbmFqZXMgZGUgY29sb3JlcyByZXByZXNlbnRhbmRvIGNvbXBldGVuY2lhcyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg0IENvbXBldGVuY2lhcwogICAgICAgICAgICAgIHAgRW5nbG9iYSBsYXMgaGFiaWxpZGFkZXMgdMOpY25pY2FzLCB2YWxvcmVzIG9yZ2FuaXphY2lvbmFsZXMgeSBjb21wb3J0YW1pZW50b3MgY2xhdmUgcXVlIHNvbiBlc2VuY2lhbGVzIHBhcmEgdW4gZGVzZW1wZcOxbyBleGl0b3NvIGVuIGVsIGNhcmdvLiBQdWVkZSBpbmNsdWlyIGNvbXBldGVuY2lhcyB0cmFuc3ZlcnNhbGVzIGNvbW8gbGlkZXJhemdvLCBhZGFwdGFiaWxpZGFkLCB0cmFiYWpvIGVuIGVxdWlwbywgY29tdW5pY2FjacOzbiBlZmVjdGl2YSB5IHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcy4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS9zbGlkZS0zLnBuZyIsIGFsdD0iSW1hZ2VuIHF1ZSBtdWVzdHJhIGEgdW5hIHBlcnNvbmEgdHJhYmFqYW5kbyBlbiB1bmEgbGFwdG9wIHJlcHJlc2VudGFuZG8gZXhwZXJpZW5jaWEiKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNCBFeHBlcmllbmNpYQogICAgICAgICAgICAgIHAgRGVmaW5lIGVsIG5pdmVsIGRlIHRyYXllY3RvcmlhIHJlcXVlcmlkbyBwYXJhIGVsIHB1ZXN0bywgaW5jbHV5ZW5kbyBsYSBjYW50aWRhZCBkZSBhw7FvcyBkZSBleHBlcmllbmNpYSBwcmV2aWEsIGVsIHRpcG8gZGUgZnVuY2lvbmVzIGRlc2VtcGXDsWFkYXMgZW4gY2FyZ29zIHNpbWlsYXJlcyB5IGxvcyBzZWN0b3JlcyBvIGluZHVzdHJpYXMgcmVsZXZhbnRlcyBwYXJhIGVsIGRlc2VtcGXDsW8gw7NwdGltbyBkZWwgcm9sLgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3NsaWRlLTMucG5nIiwgYWx0PSJJbWFnZW4gcXVlIG11ZXN0cmEgYSB1biBncnVwbyBkZSBlc3R1ZGlhbnRlcyB0cmFiYWphbmRvIGp1bnRvcyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg0IEZvcm1hY2nDs24gYWNhZMOpbWljYQogICAgICAgICAgICAgIHAgRXNwZWNpZmljYSBsb3MgZXN0dWRpb3MgbcOtbmltb3MgcmVxdWVyaWRvcyBwYXJhIGVsIHB1ZXN0bywgYXPDrSBjb21vIGNlcnRpZmljYWNpb25lcyBvYmxpZ2F0b3JpYXMsIGNhcGFjaXRhY2lvbmVzIGFkaWNpb25hbGVzIG8gY29ub2NpbWllbnRvcyBlc3BlY8OtZmljb3MgcXVlIHJlc3VsdGVuIHJlbGV2YW50ZXMgcGFyYSBlbCBlamVyY2ljaW8gZGVsIGNhcmdvLiBUYW1iacOpbiBwdWVkZSBpbmRpY2FyIGxhIHByZWZlcmVuY2lhIHBvciB0w610dWxvcyBkZSBwb3N0Z3JhZG8gbyBlc3BlY2lhbGl6YWNpb25lcy4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS9zbGlkZS0zLnBuZyIsIGFsdD0iSW1hZ2VuIHF1ZSBtdWVzdHJhIGEgdW5hIHBlcnNvbmEgZnJlbnRlIGEgdW4gdGFibGVybyBjb24gbm90YXMgYWRoZXNpdmFzIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDQgRnVuY2lvbmVzIGdlbmVyYWxlcwogICAgICAgICAgICAgIHAgRW5saXN0YSBsYXMgcHJpbmNpcGFsZXMgYWN0aXZpZGFkZXMgeSByZXNwb25zYWJpbGlkYWRlcyBxdWUgZGViZSBhc3VtaXIgbGEgcGVyc29uYSBlbiBlc3RlIGNhcmdvLCBhc2VndXJhbmRvIHF1ZSBlc3TDqW4gYWxpbmVhZGFzIGNvbiBsb3Mgb2JqZXRpdm9zIG9yZ2FuaXphY2lvbmFsZXMgeSBjb250cmlidXlhbiBhbCBkZXNhcnJvbGxvIGVmaWNpZW50ZSBkZSBsb3MgcHJvY2Vzb3MgaW50ZXJub3MuIFB1ZWRlIGluY2x1aXIgdGFudG8gdGFyZWFzIG9wZXJhdGl2YXMgY29tbyBlc3RyYXTDqWdpY2FzLgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3NsaWRlLTMucG5nIiwgYWx0PSJJbWFnZW4gcXVlIG11ZXN0cmEgdW5hIHByZXNlbnRhY2nDs24gc29icmUgbGlkZXJhemdvIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDQgR2VzdGnDs24geSBsaWRlcmF6Z28KICAgICAgICAgICAgICBwIEluZGljYSBzaSBlbCBjYXJnbyBpbXBsaWNhIGxhIGFkbWluaXN0cmFjacOzbiBkZSByZWN1cnNvcyBmaW5hbmNpZXJvcywgdGVjbm9sw7NnaWNvcyBvIGh1bWFub3MsIGxhIHN1cGVydmlzacOzbiBkZSBwZXJzb25hbCwgbGEgY29vcmRpbmFjacOzbiBkZSBlcXVpcG9zIGRlIHRyYWJham8sIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlc3RyYXTDqWdpY2FzIG8gbGEgZ2VzdGnDs24gZGUgcHJveWVjdG9zIGRlbnRybyBkZSBsYSBvcmdhbml6YWNpw7NuLgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3NsaWRlLTMucG5nIiwgYWx0PSJJbWFnZW4gcXVlIG11ZXN0cmEgYSB1biBlcXVpcG8gZGUgdHJhYmFqbyBjb2xhYm9yYW5kbyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg0IFJlbGFjaW9uZXMgbGFib3JhbGVzCiAgICAgICAgICAgICAgcCBEZWZpbmUgbGEgcG9zaWNpw7NuIGplcsOhcnF1aWNhIGRlbCBjYXJnbyBkZW50cm8gZGUgbGEgZXN0cnVjdHVyYSBvcmdhbml6YWNpb25hbCwgZXN0YWJsZWNpZW5kbyBjb24gcXVpw6luIGRlYmUgcmVwb3J0YXIgeSBhIHF1acOpbiBzdXBlcnZpc2EsIGFzw60gY29tbyBsb3MgY2FuYWxlcyBkZSBjb211bmljYWNpw7NuIGZvcm1hbGVzIGUgaW5mb3JtYWxlcyBxdWUgZGViZSB1dGlsaXphciBwYXJhIGludGVyYWN0dWFyIGNvbiBvdHJhcyDDoXJlYXMgbyBhY3RvcmVzIGludGVybm9zIHkgZXh0ZXJub3MuCiAgICAKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgQWRlbcOhcyBkZWwgcGVyZmlsIGZvcm1hbCwgZW4gYWxndW5hcyBvcmdhbml6YWNpb25lcyBzZSBjb25zaWRlcmEgdW4gInBlcmZpbCBvY3VsdG8iLCBxdWUgaW5jbHV5ZSBoYWJpbGlkYWRlcyBkZSBhZGFwdGFjacOzbiB5IGN1bHR1cmEgb3JnYW5pemFjaW9uYWwuIE5vIG9ic3RhbnRlLCBlcyBmdW5kYW1lbnRhbCBxdWUgZXN0ZSBjcml0ZXJpbyBubyBzZSBiYXNlIGVuIGFzcGVjdG9zIGRpc2NyaW1pbmF0b3Jpb3MsIHNpbm8gZW4gZmFjdG9yZXMgcXVlIHJlYWxtZW50ZSBpbXBhY3RlbiBsYSBpbnRlZ3JhY2nDs24geSBlbCBkZXNlbXBlw7FvIGRlbCBjYW5kaWRhdG8uCgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFRlbmVyIHVuIHBlcmZpbCBkZSBjYXJnbyBiaWVuIGRlZmluaWRvIG9wdGltaXphIGVsIHByb2Nlc28gZGUgc2VsZWNjacOzbiB5IGdhcmFudGl6YSBsYSBjb250cmF0YWNpw7NuIGRlIHBlcnNvbmFzIGFsaW5lYWRhcyB0YW50byBjb24gbGFzIG5lY2VzaWRhZGVzIGRlbCBwdWVzdG8gY29tbyBjb24gbGEgY3VsdHVyYSBvcmdhbml6YWNpb25hbC4gSW52ZXJ0aXIgdGllbXBvIGVuIHN1IGVsYWJvcmFjacOzbiBlcyBjbGF2ZSBwYXJhIGVsIMOpeGl0byBkZSBsYSBjb250cmF0YWNpw7NuLgogICAgCiAgICAgIC5jb2wtbGctNC5kLW5vbmUuZC1zbS1ibG9jawogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm1iLTQubWItbGctMAoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLXQxLTQubWItbGctNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS9hbmV4by0xLnBuZycsIGFsdD0nJykKICAgIAogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBGb3JtYXRvIFBlcmZpbCBkZSBjYXJnbwogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBEZXNwdcOpcyBkZSBoYWJlciByZWNvbm9jaWRvIGxvcyBkZXRhbGxlcyBxdWUgY29tcHJlbmRlIGVsIGRvY3VtZW50byBkZSBwZXJmaWwgZGUgY2FyZ28geSBsYSBpbXBvcnRhbmNpYSBlbiBlbCBwcm9jZXNvIGRlIHNlbGVjY2nDs24gc2UgZW50cmFyw6EgYSBlc3R1ZGlhciBzdXMgZGlmZXJlbnRlcyBmYXNlcy4gUGFyYSBlbGxvIHNlIHJlYWxpemFyw6EgdW5hIGRpdmlzacOzbiBlbiBkb3MgZ3JhbmRlcyBtb21lbnRvczogRWwgcHJpbWVybyBkZSBlbGxvcyBzZXLDoSByZWNsdXRhbWllbnRvIHkgZWwgc2VndW5kbyBoYWNlIHJlZmVyZW5jaWEgYSBsYSBzZWxlY2Npw7NuLiAKCiAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9fMS5wZGYnKSIgdGFyZ2V0PSJfYmxhbmsiKShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjRkNERkRCJ30iKQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8tcGRmLnN2ZyIpCiAgICAgICAgICAgICAgLmFuZXhvX190ZXh0bwogICAgICAgICAgICAgICAgcCA8c3Ryb25nPkFuZXhvLiA8L3N0cm9uZz4gRm9ybWF0byBQZXJmaWwgZGUgY2FyZ28KICAgIAogICAgICAKICAgICN0XzFfMy50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjNdIFJlY2x1dGFtaWVudG8KICAgIAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgRWwgcmVjbHV0YW1pZW50byBlcyB1biBwcm9jZXNvIGVzZW5jaWFsIHBhcmEgY3VhbHF1aWVyIG9yZ2FuaXphY2nDs24sIHlhIHF1ZSBpbXBsaWNhIGxhIGLDunNxdWVkYSBkZSBjYW5kaWRhdG9zIGlkw7NuZW9zIHBhcmEgb2N1cGFyIHVuYSB2YWNhbnRlIGRpc3BvbmlibGUuIFN1IGltcG9ydGFuY2lhIHJhZGljYSBlbiBnYXJhbnRpemFyIHF1ZSBlbCBudWV2byBjb2xhYm9yYWRvciBubyBzb2xvIGN1bXBsYSBjb24gbG9zIHJlcXVpc2l0b3MgZGVsIHB1ZXN0bywgc2lubyBxdWUgdGFtYmnDqW4gc2UgYWxpbmVlIGNvbiBsYSBjdWx0dXJhIHkgbG9zIHZhbG9yZXMgZGUgbGEgZW1wcmVzYS4KICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IEVsIHByb2Nlc28gaW5pY2lhIGNvbiBsYSByZXF1aXNpY2nDs24gZGUgcGVyc29uYWwsIGxhIGN1YWwgZXMgZ2VuZXJhZGEgcG9yIGVsIGzDrWRlciBkZWwgw6FyZWEgcXVlIGhhIGlkZW50aWZpY2FkbyBsYSBuZWNlc2lkYWQgZGUgY3VicmlyIHVuYSB2YWNhbnRlLiBFc3RhIHNvbGljaXR1ZCBwdWVkZSBzdXJnaXIgcG9yIGRpdmVyc2FzIHJhem9uZXM6CiAgICAKICAgICAgICAuYmctY29sb3ItdDEtNS5weC00CiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICAucHQtNAogICAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLXByaW1hcmlvCiAgICAgICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgICB8IFJlbnVuY2lhIGRlIHVuIGVtcGxlYWRvLgogICAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgICAgfCBDcmVhY2nDs24gZGUgdW4gbnVldm8gcHJveWVjdG8gcXVlIHJlcXVpZXJlIHBlcnNvbmFsIGFkaWNpb25hbC4KICAgICAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICAgIHwgQW50aWNpcGFjacOzbiBkZSB1biByZXRpcm8gcHJldmlzdG8uCiAgICAgICAgCiAgICAgICAgICAgICAgCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzQuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogMTkwcHgiKS5teC1hdXRvCiAgICAKCiAgICAgICAgLmJnLWNvbG9yLXQxLTYucC00CiAgICAgICAgICBwLm1iLTAgTGEgcmVxdWlzaWNpw7NuIHNlIGZvcm1hbGl6YSBhIHRyYXbDqXMgZGUgdW4gZm9ybWF0byBwcmVlc3RhYmxlY2lkbyBvIHVuIGNvcnJlbyBlbGVjdHLDs25pY28sIHkgZXMgcmVjb21lbmRhYmxlIGNvbnRhciBjb24gdW4gcmVzcGFsZG8gcXVlIGp1c3RpZmlxdWUgbGEgYWN0aXZhY2nDs24gZGVsIHByb2Nlc28uIFNpIGxhIGLDunNxdWVkYSBlcyBjb25maWRlbmNpYWwsIGRlYmUgZXNwZWNpZmljYXJzZSBwYXJhIGV2aXRhciBpbmNvbnZlbmllbnRlcy4KCiAgICAKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS81LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgIAogICAgCiAgICBoMihkYXRhLWFvcz0iZmxpcC11cCIpLm1iLTQgRnVlbnRlcyBkZSByZWNsdXRhbWllbnRvCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBVbmEgdmV6IGlkZW50aWZpY2FkYSBsYSBuZWNlc2lkYWQgZGUgY29udHJhdGFjacOzbiwgc2UgYWN0aXZhbiBkaXZlcnNhcyBmdWVudGVzIGRlIHJlY2x1dGFtaWVudG8uIExhIGVsZWNjacOzbiBkZXBlbmRlcsOhIGRlbCBwcmVzdXB1ZXN0byBkaXNwb25pYmxlIHkgZGVsIHBlcmZpbCBkZWwgY2FuZGlkYXRvIHF1ZSBzZSBidXNjYS4KCiAgICAuYmctZnVsbC13aWR0aC0yLmJnLWZvbmRvLTIucHgtNC5weC1tZC01LnB5LTQKICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gKICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KAogICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbm8tMS5zdmciCiAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgICApCiAgICAgICAgICAgIGg0Lm1iLTIudGV4dC1jZW50ZXIgSW50ZXJuYXMJCiAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBSZWZlcmlkb3MsIHByb21vY2lvbmVzIGludGVybmFzLCBtb3ZpbGlkYWQgbGFib3JhbC4KICAgICAgCiAgICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL2ljb25vLTIuc3ZnIgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgKQogICAgICAgICAgICBoNC5tYi0yLnRleHQtY2VudGVyIEV4dGVybmFzCiAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBQb3J0YWxlcyBkZSBlbXBsZW8sIHJlZGVzIHNvY2lhbGVzLCBoZWFkaHVudGVycywgYm9sc2FzIGRlIGVtcGxlbyB1bml2ZXJzaXRhcmlhcywgY2FqYXMgZGUgY29tcGVuc2FjacOzbi4KICAgICAgCiAgICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL2ljb25vLTMuc3ZnIgogICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgKQogICAgICAgICAgICBoNC5tYi0yLnRleHQtY2VudGVyIFRyYWRpY2lvbmFsZXMKICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIFJhZGlvLCBwZXJpw7NkaWNvcywgZmVyaWFzIGRlIGVtcGxlby4KCiAgICAuYmctZnVsbC13aWR0aC5pbWFnZS1vdXQtYmcubWItNQogICAgICAucHgtNC5weC1tZC01CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS82LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDI5NXB4IikubXgtYXV0bwogICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAucHQtNAogICAgICAgICAgICAgIHAgTGEgZnVlbnRlIHNlbGVjY2lvbmFkYSB2YXLDrWEgc2Vnw7puIGVsIHRpcG8gZGUgcGVyZmlsIHJlcXVlcmlkby4gUG9yIGVqZW1wbG86CiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNAogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgfCAjW3N0cm9uZyBQZXJzb25hbCBvcGVyYXRpdm86XSBsYSByYWRpbyBvIGxvcyByZWZlcmlkb3Mgc3VlbGVuIHNlciBtw6FzIGVmZWN0aXZvcy4KCiAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICB8ICNbc3Ryb25nIFBlcmZpbGVzIGVzdHJhdMOpZ2ljb3M6XSBwbGF0YWZvcm1hcyBwcm9mZXNpb25hbGVzIGNvbW8gTGlua2VkSW4gbyBlbXByZXNhcyBkZSBzZWxlY2Npw7NuIGVzcGVjaWFsaXphZGFzLgogICAgICAgICAgICAgIAoKICAgIGgyKGRhdGEtYW9zPSJmbGlwLXVwIikubWItNCBFdmFsdWFjacOzbiBkZSBob2phcyBkZSB2aWRhCgogICAgcCBFbCDDumx0aW1vIHBhc28gZGVsIHJlY2x1dGFtaWVudG8gZXMgbGEgcmV2aXNpw7NuIGRlIGxhcyBob2phcyBkZSB2aWRhLiBFbiBlc3RhIGZhc2UsIHNlIGNvbXBhcmEgbGEgaW5mb3JtYWNpw7NuIHByb3BvcmNpb25hZGEgcG9yIGxvcyBjYW5kaWRhdG9zIGNvbiBsYSBkZXNjcmlwY2nDs24gZGVsIHBlcmZpbCBkZWwgY2FyZ28uIEFzcGVjdG9zIHZlcmlmaWNhYmxlcyBpbmNsdXllbjoKCiAgICAucm93LmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAuY29sLWxnLTQKICAgICAgICAuYmctY29sb3ItdDEtOC5wLTQuYnJvdW5kZWQuaC0xMDAubWItNC5tYi1sZy0wCiAgICAgICAgICBoNC5tYi0yLnRleHQtd2hpdGUgMDEKICAgICAgICAgIHAudGV4dC13aGl0ZSBGb3JtYWNpw7NuIGFjYWTDqW1pY2EuCgogICAgICAuY29sLWxnLTQKICAgICAgICAuYmctY29sb3ItdDEtOS5wLTQuYnJvdW5kZWQuaC0xMDAubWItNC5tYi1sZy0wCiAgICAgICAgICBoNC5tYi0yIDAyCiAgICAgICAgICBwIEVzdHVkaW9zIGNvbXBsZW1lbnRhcmlvcy4KCiAgICAgIC5jb2wtbGctNAogICAgICAgIC5iZy1jb2xvci10MS0xMC5wLTQuYnJvdW5kZWQuaC0xMDAubWItNC5tYi1sZy0wCiAgICAgICAgICBoNC5tYi0yIDAzCiAgICAgICAgICBwIEV4cGVyaWVuY2lhIGxhYm9yYWwgcHJldmlhLgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci10MS0xNC5weC00LnB4LW1kLTUucHktNC5tYi01CiAgICAgIHAubWItMCBFc3RlIHByb2Nlc28gcGVybWl0ZSBwcmVzZWxlY2Npb25hciBhIGxvcyBjYW5kaWRhdG9zIG3DoXMgYWRlY3VhZG9zLCBvcHRpbWl6YW5kbyBsb3MgdGllbXBvcyB5IHJlY3Vyc29zIGRlIGxhIGVtcHJlc2EuCgoKICAgICN0XzFfNC50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjRdIFNlbGVjY2nDs24KCiAgICBwIEVsIHByb2Nlc28gZGUgc2VsZWNjacOzbiBlcyBsYSBzZWd1bmRhIGZhc2UgZW4gbGEgYWRxdWlzaWNpw7NuIGRlIHRhbGVudG8gZSBpbnZvbHVjcmEgZGl2ZXJzYXMgZXRhcGFzIGRpc2XDsWFkYXMgcGFyYSBldmFsdWFyIGEgbG9zIGNhbmRpZGF0b3MgZW4gcHJvZnVuZGlkYWQuCgogICAgaDIoZGF0YS1hb3M9ImZsaXAtdXAiKS5tYi00IEV2YWx1YWNpb25lcyBwcmV2aWFzCgogICAgcCBMYXMgcHJ1ZWJhcyBhcGxpY2FkYXMgcHVlZGVuIHNlciBkZSBkaWZlcmVudGVzIHRpcG9zLCBzZWfDum4gZWwgcGVyZmlsIHJlcXVlcmlkbyB5IGVsIHByZXN1cHVlc3RvIGRpc3BvbmlibGU6CgogICAgVGFic0MuY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iVMOpY25pY2FzIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy9pY29uLXRhYi1jLTEuc3ZnJykiICkKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgVMOpY25pY2FzCiAgICAgICAgICAgIHAgRXZhbHVhciBjb25vY2ltaWVudG9zIGVzcGVjw61maWNvcyBkZWwgY2FyZ28uCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExL3RhYi0xLnBuZycsIGFsdD0nJykKICAgIAogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iUHNpY290w6ljbmljYXMiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMS5zdmcnKSIgKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBQc2ljb3TDqWNuaWNhcwogICAgICAgICAgICBwIEFuYWxpemFyIHJhc2dvcyBkZSBwZXJzb25hbGlkYWQgeSBjb21wZXRlbmNpYXMgY29nbml0aXZhcy4KICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFiLTIucG5nJywgYWx0PScnKQogICAgCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJJbnRlbGlnZW5jaWEiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMS5zdmcnKSIgKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBJbnRlbGlnZW5jaWEKICAgICAgICAgICAgcCBNZWRpciBjYXBhY2lkYWQgYW5hbMOtdGljYSB5IHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcy4KICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFiLTMucG5nJywgYWx0PScnKQogICAgCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJBc3Nlc3NtZW50cyIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy0xLnN2ZycpIiApCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEFzc2Vzc21lbnRzCiAgICAgICAgICAgIHAgU2ltdWxhY2nDs24gZGUgZXNjZW5hcmlvcyBsYWJvcmFsZXMgcGFyYSBldmFsdWFyIGhhYmlsaWRhZGVzLgogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS90YWItNC5wbmcnLCBhbHQ9JycpCiAgICAKCgogICAgLmJnLWNvbG9yLXQxLTExLnAtNC5tYi01CiAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS9pY29uLTEtMy5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgIC5jb2wtbGcKICAgICAgICAgIHAubWItMCBFc3RhcyBwcnVlYmFzIHB1ZWRlbiBzZXIgYWRxdWlyaWRhcyBhIHByb3ZlZWRvcmVzIG8gZGVzYXJyb2xsYWRhcyBpbnRlcm5hbWVudGUuIEVzIGZ1bmRhbWVudGFsIHF1ZSBhcG9ydGVuIHZhbG9yIGFsIHByb2Nlc28geSBzZWFuIGFjb3JkZXMgY29uIGxvcyByZXF1ZXJpbWllbnRvcyBkZWwgcGVyZmlsLgogICAgCiAgICBoMihkYXRhLWFvcz0iZmxpcC11cCIpLm1iLTQgRW50cmV2aXN0YXMKCiAgICBwIExhcyBlbnRyZXZpc3RhcyBzb24gZWwgcGlsYXIgZGVsIHByb2Nlc28gZGUgc2VsZWNjacOzbiwgcGVybWl0aWVuZG8gb2J0ZW5lciBpbmZvcm1hY2nDs24gcmVsZXZhbnRlIHNvYnJlIGxvcyBjYW5kaWRhdG9zIGEgdHJhdsOpcyBkZSB1bmEgY29udmVyc2FjacOzbiBlc3RydWN0dXJhZGEgeSBvYmpldGl2YS4gTG9zIHRpcG9zIGRlIGVudHJldmlzdGFzIHNvbjogCgoKICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNSNhY28tdDEtMQogICAgICAuY29sLWxnLTgKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAuZGl2KHRpdHVsbz0iRW50cmV2aXN0YSBpbmljaWFsIikKICAgICAgICAgICAgcCBSZWFsaXphZGEgcG9yIGVsIHJlY2x1dGFkb3IgdsOtYSB0ZWxlZsOzbmljYSBvIHZpZGVvbGxhbWFkYSBjb24gZWwgb2JqZXRpdm8gZGUgdmFsaWRhciBkYXRvcyBiw6FzaWNvcyBkZWwgY2FuZGlkYXRvLCBjb25maXJtYXIgc3UgZGlzcG9uaWJpbGlkYWQsIGV4cGVjdGF0aXZhcyBzYWxhcmlhbGVzIHkgdmVyaWZpY2FyIHNpIGN1bXBsZSBjb24gbG9zIHJlcXVpc2l0b3MgbcOtbmltb3MgZGVsIGNhcmdvLiBBZGVtw6FzLCBzZSBidXNjYSBldmFsdWFyIHN1IG5pdmVsIGRlIGludGVyw6lzIHkgbW90aXZhY2nDs24gaGFjaWEgbGEgb3BvcnR1bmlkYWQgbGFib3JhbC4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkVudHJldmlzdGEgZm9ybWFsIikKICAgICAgICAgICAgcCBMbGV2YWRhIGEgY2FibyBwb3IgZWwgw6FyZWEgZGUgcmVjdXJzb3MgaHVtYW5vcyBlbiBtb2RhbGlkYWQgdmlydHVhbCBvIHByZXNlbmNpYWwsIGNvbiB1biBlbmZvcXVlIGVzdHJ1Y3R1cmFkbyBlbiBsYSBldmFsdWFjacOzbiBkZSBjb21wZXRlbmNpYXMsIHRyYXllY3RvcmlhIHByb2Zlc2lvbmFsIHkgaGFiaWxpZGFkZXMgY2xhdmUgcGFyYSBlbCBwdWVzdG8uIFNlIGFuYWxpemFuIGFzcGVjdG9zIGNvbW8gbGEgYWRhcHRhY2nDs24gYSBsYSBjdWx0dXJhIG9yZ2FuaXphY2lvbmFsLCB2YWxvcmVzIHBlcnNvbmFsZXMgeSBtb3RpdmFjacOzbiBwYXJhIGludGVncmFyc2UgYWwgZXF1aXBvLgogICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iRW50cmV2aXN0YSBjb24gZWwgamVmZSBpbm1lZGlhdG8iKQogICAgICAgICAgICBwIFNlc2nDs24gY2VudHJhZGEgZW4gZXZhbHVhciBsYXMgaGFiaWxpZGFkZXMgdMOpY25pY2FzLCBpbnRlcnBlcnNvbmFsZXMgeSBkZSBhZGFwdGFjacOzbiBkZWwgY2FuZGlkYXRvIGRlbnRybyBkZWwgZXF1aXBvIGRlIHRyYWJham8uIFNlIGFuYWxpemEgbGEgY29tcGF0aWJpbGlkYWQgY29uIGxhIGRpbsOhbWljYSBkZWwgw6FyZWEsIGxhIGZvcm1hIGVuIHF1ZSByZXN1ZWx2ZSBwcm9ibGVtYXMgeSBzdSBjYXBhY2lkYWQgZGUgYWxpbmVhcnNlIGNvbiBsb3Mgb2JqZXRpdm9zIGRlbCBkZXBhcnRhbWVudG8uIEVuIGFsZ3Vub3MgY2Fzb3MsIHNlIGluY2x1eWVuIHBydWViYXMgdMOpY25pY2FzIG8gZWplcmNpY2lvcyBzaXR1YWNpb25hbGVzIHBhcmEgZXZhbHVhciBzdSBkZXNlbXBlw7FvIGVuIGVzY2VuYXJpb3MgZXNwZWPDrWZpY29zLgogICAgCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvNy5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAoKCiAgICAubWItNShkYXRhLWFvcz0iZmFkZS11cCIsIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRjZGM0VGIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzgucG5nJywgYWx0PScnKQogICAgICAgIC5jb2wtbGcKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgUGFyYSBlc3RydWN0dXJhciBsYSBlbnRyZXZpc3RhLCBzZSByZWNvbWllbmRhIHV0aWxpemFyIHVuIGZvcm1hdG8gZGUgcmVnaXN0cm8sIGFzZWd1cmFuZG8gdHJhemFiaWxpZGFkIHkgZmFjaWxpdGFuZG8gbGEgdG9tYSBkZSBkZWNpc2lvbmVzLiBEdXJhbnRlIGxhIGVudHJldmlzdGEsIGVzIGNsYXZlIGV2aXRhciBsYSBzdWJqZXRpdmlkYWQgeSBsb3Mgc2VzZ29zLCBnYXJhbnRpemFuZG8gdW4gZWplcmNpY2lvIHByb2Zlc2lvbmFsIGJhc2FkbyBlbiBlbCByZXNwZXRvIHkgbGEgY29uZmlkZW5jaWFsaWRhZC4gU2UgZGViZSBpbmRhZ2FyIHNvYnJlIGFzcGVjdG9zIHBlcnNvbmFsZXMsIGFjYWTDqW1pY29zIHkgcHJvZmVzaW9uYWxlcywgbWFudGVuaWVuZG8gc2llbXByZSB1bmEgYWN0aXR1ZCBvYmpldGl2YSB5IMOpdGljYS4KICAgIAogICAgCiAgICBwIFVuYSBlbnRyZXZpc3RhIHNlbWllc3RydWN0dXJhZGEgc3VlbGUgZGVzYXJyb2xsYXJzZSBlbiBsYXMgc2lndWllbnRlcyBmYXNlczoKCiAgICAuYmctZnVsbC13aWR0aC5pbWFnZS1vdXQtYmcuYmctY29sb3ItRTZGMENELm1iLTUKICAgICAgLnB4LTQucHgtbWQtNQogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIC5wdC00CiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLXByaW1hcmlvLm1iLTQKICAgICAgICAgICAgICAgIGxpLm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgIHwgSW5pY2lvOiBjb25zdHJ1Y2Npw7NuIGRlIGVtcGF0w61hIHkgcHJlc2VudGFjacOzbiBkZSBsYSB2YWNhbnRlLgoKICAgICAgICAgICAgICAgIGxpLm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgIHwgRXhwbG9yYWNpw7NuIGRlIGhhYmlsaWRhZGVzOiByZXZpc2nDs24gZGUgY29tcGV0ZW5jaWFzIHBlcnNvbmFsZXMgeSDDoXJlYXMgZGUgbWVqb3JhLgoKICAgICAgICAgICAgICAgIGxpLm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgIHwgRXhwZXJpZW5jaWEgbGFib3JhbDogYW7DoWxpc2lzIGRlIGxvZ3JvcyB5IGZ1bmNpb25lcyBwcmV2aWFzLgoKICAgICAgICAgICAgICAgIGxpLm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgIHwgTW90aXZhY2lvbmVzOiBpbnRlcsOpcyBlbiBsYSBlbXByZXNhIHkgZXhwZWN0YXRpdmFzIGRlbCBjYW5kaWRhdG8uCgogICAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgfCBDaWVycmU6IGFjbGFyYWNpw7NuIGRlIGR1ZGFzIHkgcHLDs3hpbW9zIHBhc29zIGVuIGVsIHByb2Nlc28uCiAgICAgICAgICAgICAgCiAgICAKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS85LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDUwNXB4IikubXgtYXV0bwoKCiAgICBoMihkYXRhLWFvcz0iZmxpcC11cCIpLm1iLTQgVmFsaWRhY2nDs24gZGUgYW50ZWNlZGVudGVzCgogICAgcCBFc3RhIGV0YXBhIHBlcm1pdGUgY29ycm9ib3JhciBsYSBpbmZvcm1hY2nDs24gcHJvcG9yY2lvbmFkYSBwb3IgZWwgY2FuZGlkYXRvIG1lZGlhbnRlIGxhIHZlcmlmaWNhY2nDs24gZGUgcmVmZXJlbmNpYXMgbGFib3JhbGVzIHkgbGEgY29uc3VsdGEgZGUgYmFzZXMgZGUgZGF0b3Mgb2ZpY2lhbGVzLgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTQKICAgICAgLmNvbC1sZy02CiAgICAgICAgLmJnLWNvbG9yLTEucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5oLTEwMAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbi0xLTQuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIGg1Lm1iLTIgUmVmZXJlbmNpYXMgbGFib3JhbGVzCQogICAgICAgICAgICAgIHAubWItMCBFeGplZmVzIG8gZW1wbGVhZG9yZXMgcHJldmlvcy4KICAgIAogICAgICAuY29sLWxnLTYKICAgICAgICAuYmctY29sb3ItMS5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS9pY29uLTItNC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgaDUubWItMiBBbnRlY2VkZW50ZXMganVkaWNpYWxlcwkKICAgICAgICAgICAgICBwLm1iLTAgUG9saWPDrWEgTmFjaW9uYWwsIFByb2N1cmFkdXLDrWEsIENvbnRyYWxvcsOtYS4KICAgIAoKICAgIHAgTG9zIGhhbGxhemdvcyBkZWJlbiBtYW5lamFyc2UgY29uIHRvdGFsIGNvbmZpZGVuY2lhbGlkYWQgeSBubyBwdWVkZW4gc2VyIGNyaXRlcmlvcyBkZSBleGNsdXNpw7NuIHNpbiBqdXN0aWZpY2FjacOzbi4KCiAgICBoMihkYXRhLWFvcz0iZmxpcC11cCIpLm1iLTQgRXN0dWRpb3MgZGUgc2VndXJpZGFkCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgRXN0ZSBwYXNvIG5vIGVzIG9ibGlnYXRvcmlvIGVuIHRvZGFzIGxhcyBlbXByZXNhcyB5IGRlcGVuZGUgZGVsIG5pdmVsIGRlIHJpZXNnbyBhc29jaWFkbyBhbCBjYXJnby4gU2kgc2UgcmVxdWllcmUsIGRlYmUgc2VyIGdlc3Rpb25hZG8gcG9yIHVuYSBlbXByZXNhIGVzcGVjaWFsaXphZGEgeSBjb250YXIgY29uIGxhIGF1dG9yaXphY2nDs24gZGVsIGNhbmRpZGF0by4KCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBBc3BlY3RvcyBhbmFsaXphZG9zOgogICAgCiAgICAgICAgLmJnLWNvbG9yLXQxLTE0LnB4LTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIC5wdC0zCiAgICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItYmxhY2subXQtMgogICAgICAgICAgICAgICAgICBsaS5tYi0xCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgICAgfCBDb21wb3J0YW1pZW50byBmaW5hbmNpZXJvLgogICAgICAgICAgICAgICAgICBsaS5tYi0xCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgICAgfCBIaXN0b3JpYWwganVkaWNpYWwgeSBsZWdhbC4KICAgICAgICAgICAgICAgICAgbGkubWItMQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICAgIHwgUG9zaWJsZXMgZnJhdWRlcyBvIGxhdmFkbyBkZSBhY3Rpdm9zLgogICAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgICAgfCBWaXNpdGEgZG9taWNpbGlhcmlhLgogICAgICAgICAgICAKICAgICAgICAgICAgICAKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTAuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogMTkwcHgiKS5teC1hdXRvCiAgICAKICAgICAgICAuYmctY29sb3ItdDEtMTUucC00CiAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi0wIExhIGluZm9ybWFjacOzbiBvYnRlbmlkYSBkZWJlIG1hbmVqYXJzZSBjb24gZXN0cmljdGEgY29uZmlkZW5jaWFsaWRhZC4KICAgIAogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzExLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgIAoKICAgIGgyKGRhdGEtYW9zPSJmbGlwLXVwIikubWItNCBFeGFtZW4gb2N1cGFjaW9uYWwKCiAgICBwIEVuIGN1bXBsaW1pZW50byBkZSBsYSBSZXNvbHVjacOzbiAyMzQ2IGRlIDIwMDcsIGVsIGV4YW1lbiBvY3VwYWNpb25hbCBldmFsw7phIGxhIHNhbHVkIGRlbCBjYW5kaWRhdG8geSBzdSBleHBvc2ljacOzbiBhIGZhY3RvcmVzIGRlIHJpZXNnbyBlbiBlbCB0cmFiYWpvLgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby0zLnB4LTQucHgtbWQtNS5weS00CiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFyamV0YS0xLTIucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIENsw61uaWNvCiAgICAgICAgICAgICAgcC5tYi0wIERldGVybWluYXIgZWwgZXN0YWRvIGdlbmVyYWwgZGUgc2FsdWQgZGVsIGNhbmRpZGF0by4KICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS90YXJqZXRhLTItMi5wbmciIGFsdD0iIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgT2N1cGFjaW9uYWwKICAgICAgICAgICAgICBwLm1iLTAgSWRlbnRpZmljYXIgcmllc2dvcyBlc3BlY8OtZmljb3MgZGVsIGNhcmdvLgogICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3RhcmpldGEtMy0yLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBJbcOhZ2VuZXMgZGlhZ27Ds3N0aWNhcwogICAgICAgICAgICAgIHAubWItMCBEZXRlY3RhciBwb3NpYmxlcyBjb25kaWNpb25lcyBtw6lkaWNhcyByZWxhY2lvbmFkYXMgY29uIGVsIHRyYWJham8uCiAgICAgIAogICAgcCBMYSBlbGVjY2nDs24gZGUgbG9zIGV4w6FtZW5lcyBkZXBlbmRlIGRlbCBwcm9mZXNpb2dyYW1hIGRlbCBjYXJnbywgdW4gZG9jdW1lbnRvIHTDqWNuaWNvIGVsYWJvcmFkbyBwb3IgZXhwZXJ0b3MgZW4gc2VndXJpZGFkIHkgc2FsdWQgZW4gZWwgdHJhYmFqby4KCiAgICBoMihkYXRhLWFvcz0iZmxpcC11cCIpLm1iLTQgQ29udHJhdGFjacOzbgoKICAgIHAgVW5hIHZleiBzdXBlcmFkYXMgdG9kYXMgbGFzIGZhc2VzLCBzZSBwcm9jZWRlIGEgbGEgY29udHJhdGFjacOzbiBmb3JtYWwgZGVsIGNhbmRpZGF0bywgcXVlIGluY2x1eWU6CgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgLmJnLWNvbG9yLXQxLTE2LnAtNC5icm91bmRlZC5oLTEwMC5tYi00Lm1iLWxnLTAKICAgICAgICAgIGg0Lm1iLTIudGV4dC13aGl0ZSAwMQogICAgICAgICAgcC50ZXh0LXdoaXRlIEFmaWxpYWNpw7NuIGFsIHNpc3RlbWEgZGUgc2VndXJpZGFkIHNvY2lhbC4KCiAgICAgIC5jb2wtbGctNAogICAgICAgIC5iZy1jb2xvci10MS0xNy5wLTQuYnJvdW5kZWQuaC0xMDAubWItNC5tYi1sZy0wCiAgICAgICAgICBoNC5tYi0yIDAyCiAgICAgICAgICBwIFJlY29waWxhY2nDs24gZGUgZG9jdW1lbnRvcyBwYXJhIGxhIGhvamEgZGUgdmlkYSBpbnRlcm5hLgoKICAgICAgLmNvbC1sZy00CiAgICAgICAgLmJnLWNvbG9yLXQxLTE4LnAtNC5icm91bmRlZC5oLTEwMC5tYi00Lm1iLWxnLTAKICAgICAgICAgIGg0Lm1iLTIgMDMKICAgICAgICAgIHAgRmlybWEgZGVsIGNvbnRyYXRvLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLXQxLTE5CiAgICAgIC5weC00LnB4LW1kLTUucHktNAogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbi0xLTUuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wLnRleHQtd2hpdGUgRXMgaW1wb3J0YW50ZSBzZcOxYWxhciBxdWUgY2FkYSBlbXByZXNhIHB1ZWRlIG1vZGlmaWNhciBvIHBlcnNvbmFsaXphciBlc3RlIHByb2Nlc28gc2Vnw7puIHN1cyBuZWNlc2lkYWRlcyB5IGVzdHJhdGVnaWEuIEVzdGUgbW9kZWxvIGVzdHJ1Y3R1cmFkbyBubyBzb2xvIHBlcm1pdGUgb3B0aW1pemFyIGxhIHNlbGVjY2nDs24gZGUgdGFsZW50bywgc2lubyBxdWUgdGFtYmnDqW4gYXNlZ3VyYSBxdWUgbGEgZW1wcmVzYSBjdWVudGUgY29uIGNvbGFib3JhZG9yZXMgYWxpbmVhZG9zIGNvbiBzdSBtaXNpw7NuLCB2aXNpw7NuIHkgY3VsdHVyYSBvcmdhbml6YWNpb25hbC4KICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvZXJlYWRlci90ZWNub2xvZ2ljYWRlbG9yaWVudGUvNjY2NTY/cGFnZT0xMzYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBBbGxlcywgTS4gQS4gKDIwMTApLiBTZWxlY2Npw7NuIHBvciBjb21wZXRlbmNpYXM6ICggZWQuKS4gRWRpY2lvbmVzIEdyYW5pY2EuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvNTYyNjgiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBSb2phcywgUC4gKDIwMTIpLiBSZWNsdXRhbWllbnRvIHkgc2VsZWNjacOzbiAyLjA6IGxhIG51ZXZhIGZvcm1hIGRlIGVuY29udHJhciB0YWxlbnRvOiAoIGVkLikuIEVkaXRvcmlhbCBVT0MuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL2VwaXNvZGUvNnpsdXJndE04VTlxRXllaTVUTnlOSj9zaT0zOVFQZ21iQlJjbU9Oc2NOS2RrWUlBIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgUmVjdXJzb3MgeSBIdW1hbm9zIChTcG90aWZ5KSAoMjAyMSwgMDcsMjkpIFJlY2x1dGFtaWVudG8geSBzZWxlY2Npw7NuIGRlIHBlcnNvbmFsIFthdWRpbyBwb2RjYXN0XQoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQo="},null]}